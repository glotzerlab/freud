version: 2

references:
  container_ubuntu: &test_container_config_ubuntu
    docker:
      - image: vramasub/freud_py35_ubuntu:20180723
    working_directory: ~/ci/freud

  container_arch: &test_container_config_arch
    docker:
      - image: vramasub/freud_py36_arch:20180124
    working_directory: ~/ci/freud

  container_manylinux: &container_manylinux
    docker:
      - image: quay.io/pypa/manylinux1_x86_64
    working_directory: ~/ci/freud

  container_osx: &container_osx
    macos:
      xcode: "9.0"
    working_directory: ~/ci/freud

  load_code: &load_code
    checkout

  get_requirements: &get_requirements
    run:
      name: Install dependencies
      command: |
        git submodule update --init
        pip${PYVER} install --user -r requirements.txt
        pip${PYVER} install --user flake8==3.7.1
        pip${PYVER} install --user coverage

  check_source: &check_source
    run:
      name: flake8
      command: |
        python${PYVER} -m flake8 --show-source .

  build: &build
    run:
      name: Build
      command: |
        echo "PYVER=${PYVER}"
        rm freud/*.cpp
        python${PYVER} setup.py build_ext --inplace --COVERAGE --ENABLE-CYTHON

  test: &test
    run:
      name: Run unit tests
      command: |
          python${PYVER} -m unittest discover tests -v

  test_cov: &test_cov
    run:
      name: Run unit tests with coverage
      command: |
          export PATH=~/.local/bin:${PATH}
          coverage run -m unittest discover tests -v
          bash <(curl -s https://codecov.io/bash)

  store: &store
    store_artifacts:
      path: test-reports
      destination: test-reports

  build_and_test: &build_and_test
    steps:
      - *load_code
      - *get_requirements
      - *check_source
      - *build
      - *test
      - *store

  build_and_test_with_cov: &build_and_test_with_cov
    steps:
      - *load_code
      - *get_requirements
      - *check_source
      - *build
      - *test_cov
      - *store

  build_linux_wheels: &build_linux_wheels
    steps:
      - run:
          name: Install software
          working_directory: /root/code
          command: yum install -y openssh-clients
      - *load_code
      - run:
          name: Update freud submodules
          command: |
            # Update submodules
            git submodule update --init
      - run:
          name: Install TBB and compile Linux wheels
          working_directory: ~/ci/
          command: |
            # Build TBB
            git clone https://github.com/01org/tbb.git
            cd tbb
            make
            BUILD_DIR=$(find build -name linux*release)
            cd ${BUILD_DIR}
            source tbbvars.sh
            cd ~/

            # Build wheels
            for PYBIN in /opt/python/*/bin; do
                echo "Building for `${PYBIN}/python --version`"
                "${PYBIN}/pip" install -r ~/ci/freud/requirements.txt --progress-bar=off
                "${PYBIN}/pip" wheel ~/ci/freud/ -w ~/wheelhouse/ --no-deps
            done

            # Update RPath for wheels
            for whl in ~/wheelhouse/freud*.whl; do
                auditwheel repair "$whl" -w ~/ci/freud/wheelhouse/
            done

            # Install from and test all wheels
            for PYBIN in /opt/python/*/bin/; do
                "${PYBIN}/pip" install freud_analysis --no-index -f ~/ci/freud/wheelhouse
                cd ~/ci/freud/tests
                "${PYBIN}/python" -m unittest discover . -v
            done

            # Build source distribution using whichever Python appears last
            cd ..
            "${PYBIN}/python" setup.py sdist --dist-dir ~/ci/freud/wheelhouse/

            "${PYBIN}/pip" install --user twine
            "${PYBIN}/python" -m twine upload --username vramasub --password ${PYPI_PASSWORD} ~/ci/freud/wheelhouse/*

  build_osx_wheels: &build_osx_wheels
    steps:
      - *load_code
      - run:
          name: Update freud submodules
          command: |
            # Update submodules
            git submodule update --init
      - run:
          name: Install TBB and compile Mac wheels
          working_directory: ~/ci/
          command: |
            export MACOSX_DEPLOYMENT_TARGET=10.12
            # Get pyenv
            brew install pyenv
            eval "$(pyenv init -)"
            PY_VERSIONS=(2.7.15 3.5.6 3.6.6 3.7.0)

            # Build TBB
            git clone https://github.com/01org/tbb.git
            cd tbb
            make
            BUILD_DIR=$(find build -name mac*release)
            cd ${BUILD_DIR}
            source tbbvars.sh
            # Force the TBB path to use an absolute path to itself for others to find.
            install_name_tool -id "${PWD}/libtbb.dylib" libtbb.dylib
            cd ~/

            # Build wheels
            for VERSION in ${PY_VERSIONS[@]}; do
                echo "Building for Python ${VERSION}"
                pyenv install ${VERSION}
                pyenv global ${VERSION}
                pip install -r ~/ci/freud/requirements.txt
                pip install wheel delocate
                pip wheel ~/ci/freud/ -w ~/wheelhouse/ --no-deps
            done

            # Update RPath for wheels
            for whl in ~/wheelhouse/freud*.whl; do
                delocate-wheel "$whl" -w ~/ci/freud/wheelhouse/
            done

            # Install from and test all wheels
            for VERSION in ${PY_VERSIONS[@]}; do
                pip install freud_analysis --no-index -f ~/ci/freud/wheelhouse
                cd ~/ci/freud/tests
                python -m unittest discover . -v
            done

            pip install --user twine
            python -m twine upload --username vramasub --password ${PYPI_PASSWORD} ~/ci/freud/wheelhouse/*


jobs:
  test-py27:
    <<: *test_container_config_ubuntu
    environment:
      PYVER: "2.7"
    <<: *build_and_test

  test-py35:
    <<: *test_container_config_ubuntu
    environment:
      PYVER: "3.5"
    <<: *build_and_test

  test-py36:
    <<: *test_container_config_arch
    environment:
      PYVER: "3.6"
    <<: *build_and_test_with_cov

  pypi-linux-wheels:
    <<: *container_manylinux
    <<: *build_linux_wheels

  pypi-osx-wheels:
    <<: *container_osx
    <<: *build_osx_wheels

workflows:
  version: 2
  test:
    jobs:
      - test-py27
      - test-py35
      - test-py36
  deploy:
    jobs:
      - pypi-osx-wheels:
          filters:
              tags:
                only: /^v.*/
              branches:
                ignore: /.*/
      - pypi-linux-wheels:
          filters:
              tags:
                only: /^v.*/
              branches:
                ignore: /.*/

