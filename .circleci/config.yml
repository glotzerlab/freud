version: 2.1

orbs:
  win: circleci/windows@2.2.0  # Enables Windows executors

references:
  container_manylinux: &container_manylinux
    docker:
      - image: quay.io/pypa/manylinux2010_x86_64
    working_directory: ~/ci/freud

  container_macos: &container_macos
    macos:
      xcode: "12.0.0"
    working_directory: ~/ci/freud

  load_code: &load_code
    checkout

  update_submodules: &update_submodules
    run:
      name: Update submodules
      command: |
        git submodule update --init

  get_requirements: &get_requirements
    run:
      name: Install dependencies
      command: |
        # Create a virtual environment to ignore the CI image's pre-installed packages
        ${PYTHON} -m pip install --progress-bar off --upgrade virtualenv --user
        mkdir -p ./venv
        ${PYTHON} -m virtualenv ./venv --clear
        . venv/bin/activate
        ${PYTHON} -m pip install --progress-bar off --upgrade pip
        if [ "${DEPENDENCIES}" == "OLDEST" ]; then
          # Since we're testing against a very old cmake, wheels may not exist
          # for Python versions >=3.8. We will need to build the cmake wheels
          # from a tarball in this case, and cmake depends on scikit-build, so we
          # install skbuild separately here. Note that newer cmake versions build
          # universal wheels instead, so once we upgrade to cmake >=3.14 we
          # won't be dependent on them updating wheels for specific new Python
          # versions.
          #
          # Some requirements below are not strictly the lowest versions, and
          # are only needed for testing.
          ${PYTHON} -m pip install --progress-bar off -r .circleci/ci-oldest-reqs.txt
        else
          ${PYTHON} -m pip install --progress-bar off -U -r requirements/requirements-test.txt
        fi
        # Show the installed package versions
        ${PYTHON} -m pip list

  get_conda_requirements: &get_conda_requirements
    run:
      name: Install dependencies with conda
      command: |
        conda config --set always_yes yes --set changeps1 no
        conda config --add channels conda-forge
        conda update -q conda
        conda install python=${PYVER} pip tbb tbb-devel
        conda update --all
        ${PYTHON} -m pip install --progress-bar off scikit-build==0.10.0
        ${PYTHON} -m pip install --progress-bar off -U -r requirements/requirements-test.txt
        # Install cmake >=3.14 to support Visual Studio 2019 generator
        ${PYTHON} -m pip install --progress-bar off -U cmake~=3.14

  get_pre_commit_requirements: &get_pre_commit_requirements
    run:
      name: Install pre-commit dependencies
      command: |
        # We don't actually need to build, so we don't need any of the normal
        # dependencies, but we need to initialize the build system far enough
        # to generate a compile database. For convenience, just use the latest
        # wheels for these; the actual build steps will test against our older
        # supported versions.
        ${PYTHON} -m pip install --user scikit-build cmake
        ${PYTHON} -m pip install --user -r requirements/requirements-precommit.txt

  pre-test-checks: &pre-test-checks
    run:
      name: Run all static checks
      command: |
        # Run the standard pre-commit checks first
        ${PYTHON} -m pre_commit run --all-files --show-diff-on-failure
        # Next, run the C++ pre-commit checks.  We need to generate the
        # compile_commands.json database, which requires building.
        ${PYTHON} setup.py build_ext --inplace -- -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -- -j 4
        ${PYTHON} -m pre_commit run --all-files --hook-stage manual --show-diff-on-failure

  build: &build
    run:
      name: Build
      command: |
        if [ -d "venv" ]; then
          . venv/bin/activate
        fi
        ${PYTHON} --version
        # Max 4 threads to not overtax CI.
        ${PYTHON} setup.py build_ext --inplace -- -DCOVERAGE=ON -- -j 4 -v

  windows_env: &windows_env
    PYTHON: "python"
    TBBROOT: "C:\\tools\\miniconda3\\Library"

  build_windows: &build_windows
    run:
      name: Build with MSVC
      command: |
        ${PYTHON} --version
        ${PYTHON} setup.py build_ext --inplace -- -G "Visual Studio 16 2019" -DCOVERAGE=ON

  test: &test
    run:
      name: Run unit tests
      command: |
        if [ -d "venv" ]; then
          . venv/bin/activate
        fi
        ${PYTHON} -m pytest tests/ -v

  test_cov: &test_cov
    run:
      name: Run unit tests with coverage
      command: |
        if [ -d "venv" ]; then
          . venv/bin/activate
        fi
        ${PYTHON} -m pytest --cov --cov-config=setup.cfg --cov-report=xml tests/ -v
        codecov

  store: &store
    store_artifacts:
      path: test-reports
      destination: test-reports

  benchmark: &benchmark
    run:
      name: Run benchmarks
      command: |
        echo 'export PYTHONPATH=$PYTHONPATH:.' >> $BASH_ENV
        echo 'export BENCHMARK_NPROC=2' >> $BASH_ENV
        source $BASH_ENV
        BENCHSCR="benchmarks/benchmarker.py"
        echo "Running benchmark on current HEAD"
        ${PYTHON} "$BENCHSCR" run

  comparison: &comparison
    run:
      name: Compare benchmark with origin/master
      command: |
        echo "Comparing with origin/master"
        git reset --hard origin/master
        echo "PYVER=${PYVER}"
        echo 'export PYTHONPATH=$PYTHONPATH:.' >> $BASH_ENV
        echo 'export BENCHMARK_NPROC=2' >> $BASH_ENV
        source $BASH_ENV
        # Max 4 threads to not overtax CI.
        ${PYTHON} setup.py build_ext --inplace -- -DCOVERAGE=ON -- -j 4
        git checkout "${CIRCLE_SHA1}" -- benchmarks/
        BENCHSCR="benchmarks/benchmarker.py"
        echo "Running benchmark on origin/master"
        ${PYTHON} "$BENCHSCR" run
        ${PYTHON} "$BENCHSCR" compare origin/master "${CIRCLE_SHA1}"

  store_benchmarks: &store_benchmarks
    store_artifacts:
      path: benchmarks/reports
      destination: benchmarks-reports

  load_check_style: &load_check_style
    working_directory: ~/ci/freud
    steps:
      - *load_code
      - *update_submodules
      - *get_pre_commit_requirements
      - *pre-test-checks

  build_and_test_linux: &build_and_test_linux
    working_directory: ~/ci/freud
    steps:
      - *load_code
      - *update_submodules
      - *get_requirements
      - *build
      - *test
      - *store

  build_and_test_linux_with_cov: &build_and_test_linux_with_cov
    <<: *build_and_test_linux
    steps:
      - *load_code
      - *update_submodules
      - *get_requirements
      - *build
      - *test_cov
      - *store

  build_and_test_windows: &build_and_test_windows
    executor:
      name: win/default
      shell: bash.exe
    steps:
      - *load_code
      - *update_submodules
      - *get_conda_requirements
      - *build_windows
      - *test_cov
      - *store

  build_and_benchmark: &build_and_benchmark
    steps:
      - *load_code
      - *update_submodules
      - *get_requirements
      - *build
      - *benchmark
      - *comparison
      - *store_benchmarks

jobs:
  check-style:
    docker:
      - image: glotzerlab/ci:2020.10-clang11_py39
    environment:
      PYVER: "3.9"
      PYTHON: "python3.9"
    <<: *load_check_style

  linux-python-39:
    docker:
      - image: glotzerlab/ci:2020.10-py39
    environment:
      PYVER: "3.9"
      PYTHON: "python3.9"
    <<: *build_and_test_linux_with_cov

  linux-python-38:
    docker:
      - image: glotzerlab/ci:2020.10-py38
    environment:
      PYVER: "3.8"
      PYTHON: "python3.8"
    <<: *build_and_test_linux_with_cov

  linux-python-37:
    docker:
      - image: glotzerlab/ci:2020.10-py37
    environment:
      PYVER: "3.7"
      PYTHON: "python3.7"
    <<: *build_and_test_linux_with_cov

  linux-python-36-oldest:
    docker:
      - image: glotzerlab/ci:2020.10-py36
    environment:
      PYVER: "3.6"
      PYTHON: "python3.6"
      DEPENDENCIES: "OLDEST"
    <<: *build_and_test_linux

  windows-python-310:
    environment:
      PYVER: "3.10"
      <<: *windows_env
    <<: *build_and_test_windows

  windows-python-39:
    environment:
      PYVER: "3.9"
      <<: *windows_env
    <<: *build_and_test_windows

  windows-python-38:
    environment:
      PYVER: "3.8"
      <<: *windows_env
    <<: *build_and_test_windows

  windows-python-37:
    environment:
      PYVER: "3.7"
      <<: *windows_env
    <<: *build_and_test_windows

  benchmarks:
    docker:
      - image: glotzerlab/ci:2020.01-py38
    working_directory: ~/ci/freud
    environment:
      PYVER: "3.8"
      PYTHON: "python3.8"
    <<: *build_and_benchmark

workflows:
  version: 2
  test:
    jobs:
      - check-style
      - linux-python-39
      - linux-python-38:
          requires:
            - check-style
            - linux-python-39
      - linux-python-37:
          requires:
            - check-style
            - linux-python-39
      - linux-python-36-oldest:
          requires:
            - check-style
            - linux-python-39
      - windows-python-310
      - windows-python-39:
          requires:
            - check-style
            - windows-python-310
      - windows-python-38:
          requires:
            - check-style
            - windows-python-310
      - windows-python-37:
          requires:
            - check-style
            - windows-python-310
# Disabled benchmarks on CI - they currently take too much work
#     - benchmarks:
#         requires:
#           - linux-python-38
