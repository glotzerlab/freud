version: 2.1

orbs:
  win: circleci/windows@2.2.0  # Enables Windows executors

references:
  container_manylinux: &container_manylinux
    docker:
      - image: quay.io/pypa/manylinux1_x86_64
    working_directory: ~/ci/freud

  container_macos: &container_macos
    macos:
      xcode: "9.0"
    working_directory: ~/ci/freud

  load_code: &load_code
    checkout

  load_code_centos: &load_code_centos
    # For use with old OS that doesn't support clone over ssh
    run:
      name: Checkout repository without ssh
      command: |
        cd ~/ci/freud
        git clone ${CIRCLE_REPOSITORY_URL} .
        if [ -n "$CIRCLE_TAG" ]
        then
          git reset --hard "$CIRCLE_SHA1"
          git checkout -q "$CIRCLE_TAG"
        elif [ -n "$CIRCLE_BRANCH" ]
        then
          git reset --hard "$CIRCLE_SHA1"
          git checkout -q -B "$CIRCLE_BRANCH"
        fi

  update_submodules: &update_submodules
    run:
      name: Update submodules
      command: |
        git submodule update --init

  get_requirements: &get_requirements
    run:
      name: Install dependencies
      command: |
        python${PYVER} -m pip install --user -r requirements-testing.txt

  get_conda_requirements: &get_conda_requirements
    run:
      name: Install dependencies with conda
      command: |
        conda config --set always_yes yes --set changeps1 no
        conda config --add channels conda-forge
        conda update -q conda certifi
        conda install python pip tbb tbb-devel
        # Install from PyPI instead of conda-forge for consistency with Linux.
        # For some reason, the SSL certificates used by pip aren't correct, even with certifi.
        curl -O https://curl.haxx.se/ca/cacert.pem
        python${PYVER} -m pip install --cert cacert.pem --progress-bar off -U -r requirements-testing.txt

  get_style_requirements: &get_style_requirements
    run:
      name: Install style check dependencies
      command: |
        python${PYVER} -m pip install --user flake8==3.8.3

  #check_cpp_style: &check_cpp_style
  #  run:
  #    name: clang-format
  #    command: |
  #      for f in cpp/**/*; do
  #        if ! diff $f <(clang-format-6.0 -style=file $f) > /dev/null; then
  #          echo "$f does not match clang-format style."
  #          diff --color $f <(clang-format-6.0 -style=file $f) || true
  #        fi
  #      done

  check_python_style: &check_python_style
    run:
      name: flake8
      command: |
        python${PYVER} -m flake8 --show-source .

  build: &build
    run:
      name: Build
      command: |
        python${PYVER} --version
        python${PYVER} setup.py build_ext --inplace --COVERAGE

  test: &test
    run:
      name: Run unit tests
      command: |
          python${PYVER} -m unittest discover tests -v

  test_cov: &test_cov
    run:
      name: Run unit tests with coverage
      command: |
          export PATH=~/.local/bin:${PATH}
          coverage run -m unittest discover tests -v
          bash <(curl -s https://codecov.io/bash)

  store: &store
    store_artifacts:
      path: test-reports
      destination: test-reports

  benchmark: &benchmark
    run:
      name: Run benchmarks
      command: |
          python${PYVER} -m pip install --user -r requirements-testing.txt
          echo 'export PYTHONPATH=$PYTHONPATH:.' >> $BASH_ENV
          echo 'export BENCHMARK_NPROC=2' >> $BASH_ENV
          source $BASH_ENV
          BENCHSCR="benchmarks/benchmarker.py"
          echo "Running benchmark on current HEAD"
          python${PYVER} "$BENCHSCR" run

  comparison: &comparison
    run:
      name: Compare benchmark with origin/master
      command: |
          echo "Comparing with origin/master"
          git reset --hard origin/master
          echo "PYVER=${PYVER}"
          echo 'export PYTHONPATH=$PYTHONPATH:.' >> $BASH_ENV
          echo 'export BENCHMARK_NPROC=2' >> $BASH_ENV
          source $BASH_ENV
          rm freud/*.cpp
          python${PYVER} setup.py build_ext --inplace --COVERAGE --ENABLE-CYTHON
          git checkout "${CIRCLE_SHA1}" -- benchmarks/
          BENCHSCR="benchmarks/benchmarker.py"
          echo "Running benchmark on origin/master"
          python${PYVER} "$BENCHSCR" run
          python${PYVER} "$BENCHSCR" compare origin/master "${CIRCLE_SHA1}"

  store_benchmarks: &store_benchmarks
    store_artifacts:
      path: benchmarks/reports
      destination: benchmarks-reports

  build_and_test_linux: &build_and_test_linux
    steps:
      - *load_code
      - *update_submodules
      - *get_requirements
      - *build
      - *test
      - *store

  build_and_test_linux_with_cov: &build_and_test_linux_with_cov
    steps:
      - *load_code
      - *update_submodules
      - *get_requirements
      - *build
      - *test_cov
      - *store

  build_and_test_windows: &build_and_test_windows
    steps:
      - *load_code
      - *update_submodules
      - *get_conda_requirements
      - *build
      - *test_cov
      - *store

  load_check_style: &load_check_style
    steps:
      - *load_code
      - *update_submodules
      - *get_style_requirements
      #- *check_cpp_style
      - *check_python_style

  build_and_benchmark: &build_and_benchmark
    steps:
      - *load_code
      - *update_submodules
      - *get_requirements
      - *build
      - *benchmark
      - *comparison
      - *store_benchmarks

  build_linux_test_wheels: &build_linux_test_wheels
    steps:
      - run:
          name: Install software
          working_directory: /root/code
          command: yum install -y openssh-clients
      - *load_code_centos
      - *update_submodules
      - run:
          name: Compile Linux wheels
          command: |
            bash .circleci/deploy-linux.sh testpypi

  build_linux_wheels: &build_linux_wheels
    steps:
      - run:
          name: Install software
          working_directory: /root/code
          command: yum install -y openssh-clients
      - *load_code_centos
      - *update_submodules
      - run:
          name: Compile Linux wheels
          command: |
            bash .circleci/deploy-linux.sh pypi

  build_macos_test_wheels: &build_macos_test_wheels
    steps:
      - *load_code
      - *update_submodules
      - run:
          name: Compile Mac wheels
          command: |
            bash .circleci/deploy-macos.sh testpypi

  build_macos_wheels: &build_macos_wheels
    steps:
      - *load_code
      - *update_submodules
      - run:
          name: Compile Mac wheels
          command: |
            bash .circleci/deploy-macos.sh pypi

jobs:
  check-style:
    docker:
      - image: glotzerlab/ci:2020.01-py38
    working_directory: ~/ci/freud
    environment:
      PYVER: "3.8"
    <<: *load_check_style

  linux-python-38:
    docker:
      - image: glotzerlab/ci:2020.01-py38
    working_directory: ~/ci/freud
    environment:
      PYVER: "3.8"
    <<: *build_and_test_linux

  linux-python-37:
    docker:
      - image: glotzerlab/ci:2020.01-py37
    working_directory: ~/ci/freud
    environment:
      PYVER: "3.7"
    <<: *build_and_test_linux_with_cov

  linux-python-36:
    docker:
      - image: glotzerlab/ci:2020.01-py36
    working_directory: ~/ci/freud
    environment:
      PYVER: "3.6"
    <<: *build_and_test_linux

  windows-python-37:
    executor:
      name: win/default
      shell: bash.exe
    environment:
      PYVER: ""  # Windows CI image doesn't have aliases for python3.7
      TBB_INCLUDE: "C:\\tools\\miniconda3\\Library\\include"
      TBB_LINK: "C:\\tools\\miniconda3\\Library\\lib"
    <<: *build_and_test_windows

  test-deploy-pypi-linux:
    environment:
      # Force clone over https instead of ssh.
      CIRCLE_REPOSITORY_URL: https://github.com/glotzerlab/freud
    <<: *container_manylinux
    <<: *build_linux_test_wheels

  test-deploy-pypi-macos:
    <<: *container_macos
    <<: *build_macos_test_wheels

  deploy-pypi-linux:
    environment:
      # Force clone over https instead of ssh.
      CIRCLE_REPOSITORY_URL: https://github.com/glotzerlab/freud
    <<: *container_manylinux
    <<: *build_linux_wheels

  deploy-pypi-macos:
    <<: *container_macos
    <<: *build_macos_wheels

  benchmarks:
    docker:
      - image: glotzerlab/ci:2020.01-py38
    working_directory: ~/ci/freud
    environment:
      PYVER: "3.8"
    <<: *build_and_benchmark

workflows:
  version: 2
  test:
    jobs:
      - check-style
      - linux-python-38:
          requires:
            - check-style
      - linux-python-37:
          requires:
            - check-style
      - linux-python-36:
          requires:
            - check-style
      - windows-python-37:
          requires:
            - check-style
# Disabled benchmarks on CI - they currently take too much work
#     - benchmarks:
#         requires:
#           - linux-python-38
      - test-deploy-pypi-macos:
          filters:
            branches:
              only: /release\/.*/
          requires:
            - linux-python-38
            - linux-python-37
            - linux-python-36
            - windows-python-37
      - test-deploy-pypi-linux:
          filters:
            branches:
              only: /release\/.*/
          requires:
            - linux-python-38
            - linux-python-37
            - linux-python-36
            - windows-python-37

  deploy:
    jobs:
      - deploy-pypi-macos:
          filters:
              tags:
                only: /^v.*/
              branches:
                ignore: /.*/
      - deploy-pypi-linux:
          filters:
              tags:
                only: /^v.*/
              branches:
                ignore: /.*/
