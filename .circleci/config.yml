version: 2

references:
  container_ubuntu18: &test_container_config_ubuntu18
    docker:
      - image: glotzerlab/ci:2019.06-ubuntu18.04
    working_directory: ~/ci/freud

  container_ubuntu19: &test_container_config_ubuntu19
    docker:
      - image: glotzerlab/ci:2019.06-ubuntu19.04
    working_directory: ~/ci/freud

  container_manylinux: &container_manylinux
    docker:
      - image: quay.io/pypa/manylinux1_x86_64
    working_directory: ~/ci/freud

  container_osx: &container_osx
    macos:
      xcode: "9.0"
    working_directory: ~/ci/freud

  load_code: &load_code
    checkout

  load_code_centos: &load_code_centos
    # For use with old OS that doesn't support clone over ssh
    run:
      name: Checkout repository without ssh
      command: |
        cd ~/ci/freud
        git clone ${CIRCLE_REPOSITORY_URL} .
        if [ -n "$CIRCLE_TAG" ]
        then
          git reset --hard "$CIRCLE_SHA1"
          git checkout -q "$CIRCLE_TAG"
        elif [ -n "$CIRCLE_BRANCH" ]
        then
          git reset --hard "$CIRCLE_SHA1"
          git checkout -q -B "$CIRCLE_BRANCH"
        fi

  get_requirements: &get_requirements
    run:
      name: Install dependencies
      command: |
        git submodule update --init
        $PIP install --user -r requirements.txt
        $PIP install --user -U coverage cython matplotlib rowan sympy

  get_style_requirements: &get_style_requirements
    run:
      name: Install style check dependencies
      command: |
        git submodule update --init
        $PIP install --user -r requirements.txt
        $PIP install --user flake8==3.7.7

  check_style: &check_style
    run:
      name: clang-format and flake8
      command: |
        for f in cpp/**/*; do
          if ! diff $f <(clang-format-6.0 -style=file $f) > /dev/null; then
            echo "$f does not match clang-format style."
            diff --color $f <(clang-format-6.0 -style=file $f) || true
          fi
        done
        python${PYVER} -m flake8 --show-source .

  build: &build
    run:
      name: Build
      command: |
        echo "PYVER=${PYVER}"
        rm freud/*.cpp
        python${PYVER} setup.py build_ext --inplace --COVERAGE --ENABLE-CYTHON

  test: &test
    run:
      name: Run unit tests
      command: |
          python${PYVER} -m unittest discover tests -v

  test_cov: &test_cov
    run:
      name: Run unit tests with coverage
      command: |
          export PATH=~/.local/bin:${PATH}
          coverage run -m unittest discover tests -v
          bash <(curl -s https://codecov.io/bash)

  store: &store
    store_artifacts:
      path: test-reports
      destination: test-reports

  benchmark: &benchmark
    run:
      name: Run benchmarks
      command: |
          $PIP install --user gitpython
          $PIP install --user rowan
          echo 'export PYTHONPATH=$PYTHONPATH:.' >> $BASH_ENV
          echo 'export BENCHMARK_NPROC=2' >> $BASH_ENV
          source $BASH_ENV
          BENCHSCR="benchmarks/benchmarker.py"
          echo "Running benchmark on current HEAD"
          python${PYVER} "$BENCHSCR" run

  comparison: &comparison
    run:
      name: Compare benchmark with origin/master
      command: |
          echo "Comparing with origin/master"
          git reset --hard origin/master
          echo "PYVER=${PYVER}"
          echo 'export PYTHONPATH=$PYTHONPATH:.' >> $BASH_ENV
          echo 'export BENCHMARK_NPROC=2' >> $BASH_ENV
          source $BASH_ENV
          rm freud/*.cpp
          python${PYVER} setup.py build_ext --inplace --COVERAGE --ENABLE-CYTHON
          git checkout "${CIRCLE_SHA1}" -- benchmarks/
          BENCHSCR="benchmarks/benchmarker.py"
          echo "Running benchmark on origin/master"
          python${PYVER} "$BENCHSCR" run
          python${PYVER} "$BENCHSCR" compare origin/master "${CIRCLE_SHA1}"

  store_benchmarks: &store_benchmarks
    store_artifacts:
      path: benchmarks/reports
      destination: benchmarks-reports

  build_and_test: &build_and_test
    steps:
      - *load_code
      - *get_requirements
      - *build
      - *test
      - *store

  build_and_test_with_cov: &build_and_test_with_cov
    steps:
      - *load_code
      - *get_requirements
      - *build
      - *test_cov
      - *store

  load_check_style: &load_check_style
    steps:
      - *load_code
      - *get_style_requirements
      - *check_style

  build_and_benchmark: &build_and_benchmark
    steps:
      - *load_code
      - *get_requirements
      - *build
      - *benchmark
      - *comparison
      - *store_benchmarks

  build_linux_wheels: &build_linux_wheels
    steps:
      - run:
          name: Install software
          working_directory: /root/code
          command: yum install -y openssh-clients
      - *load_code_centos
      - run:
          name: Update freud submodules
          command: |
            # Update submodules
            git submodule update --init
      - run:
          name: Install TBB and compile Linux wheels
          working_directory: ~/ci/
          command: |
            # Build TBB
            git clone https://github.com/01org/tbb.git
            cd tbb
            make
            BUILD_DIR=$(find build -name linux*release)
            cd ${BUILD_DIR}
            source tbbvars.sh
            cd ~/

            # Build wheels
            for PYBIN in /opt/python/cp3*/bin; do
              # Split the echo command and the version since python2
              # --version doesn't return the value, just prints it.
              echo "Building for "
              ${PYBIN}/python --version

              "${PYBIN}/python" -m pip install cython --no-deps --ignore-installed -q --progress-bar=off
              rm -rf numpy-1.10.4
              curl -sSLO https://github.com/numpy/numpy/archive/v1.10.4.tar.gz
              tar -xzf v1.10.4.tar.gz
              cd numpy-1.10.4
              rm -f numpy/random/mtrand/mtrand.c
              rm -f PKG-INFO
              "${PYBIN}/python" -m pip install . --no-deps --ignore-installed -v --progress-bar=off -q

              # Force installation of version of SciPy (1.2) that works with
              # old NumPy (1.3 requires newer).
              "${PYBIN}/pip" install scipy==1.2.1 --progress-bar=off
              "${PYBIN}/pip" wheel ~/ci/freud/ -w ~/wheelhouse/ --no-deps --no-build-isolation --no-use-pep517
            done

            # Update RPath for wheels
            for whl in ~/wheelhouse/freud*.whl; do
              auditwheel repair "$whl" -w ~/ci/freud/wheelhouse/
            done

            # Install from and test all wheels
            for PYBIN in /opt/python/*/bin/; do
              "${PYBIN}/python" -m pip install freud_analysis --no-deps --no-index -f ~/ci/freud/wheelhouse
              "${PYBIN}/python" -m pip install rowan sympy
              cd ~/ci/freud/tests
              "${PYBIN}/python" -m unittest discover . -v
            done

            # Build source distribution using whichever Python appears last
            cd ..
            "${PYBIN}/python" setup.py sdist --dist-dir ~/ci/freud/wheelhouse/

            "${PYBIN}/pip" install --user twine
            "${PYBIN}/python" -m twine upload --username vramasub --password ${PYPI_PASSWORD} ~/ci/freud/wheelhouse/*

  build_osx_wheels: &build_osx_wheels
    steps:
      - *load_code
      - run:
          name: Update freud submodules
          command: |
            # Update submodules
            git submodule update --init
      - run:
          name: Install TBB and compile Mac wheels
          working_directory: ~/ci/
          command: |
            export MACOSX_DEPLOYMENT_TARGET=10.12
            # Get pyenv
            brew install pyenv
            eval "$(pyenv init -)"
            PY_VERSIONS=(3.5.6 3.6.6 3.7.0)

            # Build TBB
            git clone https://github.com/01org/tbb.git
            cd tbb
            make
            BUILD_DIR=$(find build -name mac*release)
            cd ${BUILD_DIR}
            source tbbvars.sh
            # Force the TBB path to use an absolute path to itself for others to find.
            install_name_tool -id "${PWD}/libtbb.dylib" libtbb.dylib
            cd ~/

            # Build wheels
            for VERSION in ${PY_VERSIONS[@]}; do
              echo "Building for Python ${VERSION}"
              pyenv install ${VERSION}
              pyenv global ${VERSION}

              pip install --upgrade pip
              pip install cython --no-deps --ignore-installed -q --progress-bar=off
              rm -rf numpy-1.10.4
              curl -sSLO https://github.com/numpy/numpy/archive/v1.10.4.tar.gz
              tar -xzf v1.10.4.tar.gz
              cd numpy-1.10.4
              rm -f numpy/random/mtrand/mtrand.c
              rm -f PKG-INFO
              pip install . --no-deps --ignore-installed -v -q --progress-bar=off

              # Force installation of version of SciPy (1.2) that works with
              # old NumPy (1.3 requires newer).  On Mac, also have to avoid
              # version 1.2 because its voronoi is broken, so revert to 1.1.0
              pip install scipy==1.1.0 --progress-bar=off
              pip install wheel delocate --progress-bar=off
              pip wheel ~/ci/freud/ -w ~/wheelhouse/ --no-deps --no-build-isolation --no-use-pep517
            done

            # Update RPath for wheels
            for whl in ~/wheelhouse/freud*.whl; do
              delocate-wheel "$whl" -w ~/ci/freud/wheelhouse/
            done

            # Install from and test all wheels
            for VERSION in ${PY_VERSIONS[@]}; do
              pyenv global ${VERSION}
              pip install freud_analysis --no-deps --no-index -f ~/ci/freud/wheelhouse
              pip install rowan sympy
              cd ~/ci/freud/tests
              python -m unittest discover . -v
            done

            pip install --user twine
            python -m twine upload --username vramasub --password ${PYPI_PASSWORD} ~/ci/freud/wheelhouse/*


jobs:
  check-style:
    <<: *test_container_config_ubuntu19
    environment:
      PYVER: "3.7"
      PIP: "pip3"
    <<: *load_check_style

  test-py36:
    <<: *test_container_config_ubuntu18
    environment:
      PYVER: "3.6"
      PIP: "pip3.6"
    <<: *build_and_test

  test-py37:
    <<: *test_container_config_ubuntu19
    environment:
      PYVER: "3.7"
      PIP: "pip3"
    <<: *build_and_test_with_cov

  test-py38:
    <<: *test_container_config_ubuntu19
    environment:
      PYVER: "3.8"
      PIP: "pip3.8"
    <<: *build_and_test

  pypi-osx-wheels:
    <<: *container_osx
    <<: *build_osx_wheels

  pypi-linux-wheels:
    environment:
      # Force clone over https instead of ssh.
      CIRCLE_REPOSITORY_URL: https://github.com/glotzerlab/freud
    <<: *container_manylinux
    <<: *build_linux_wheels

  benchmarks:
    <<: *test_container_config_ubuntu18
    environment:
      PYVER: "3.7"
      PIP: "pip3"
    <<: *build_and_benchmark

workflows:
  version: 2
  test:
    jobs:
      - check-style
      - test-py36:
          requires:
            - check-style
      - test-py37:
          requires:
            - check-style
    #  Disabling 3.8 until it's added to the container.
    #  - test-py38:
    #      requires:
    #        - check-style
# Disabled benchmarks on CI - they currently take too much work
#     - benchmarks:
#         requires:
#           - test-py36
  deploy:
    jobs:
      - pypi-osx-wheels:
          filters:
              tags:
                only: /^v.*/
              branches:
                ignore: /.*/
      - pypi-linux-wheels:
          filters:
              tags:
                only: /^v.*/
              branches:
                ignore: /.*/
